{"version":3,"sources":["components/CardList.js","components/SearchBox.js","components/Scroll.js","components/errorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["CardList","robots","Error","SearchBox","searchChange","className","type","placeholder","onChange","Scroll","props","style","overflow","height","border","children","errorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"kOAkBeA,G,MAfE,SAAC,GAAa,EAAZC,OAEX,MAAM,IAAIC,MAAM,2BCaTC,EAhBG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,6BACI,yBAAKC,UAAU,OACZ,2BACAA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,OCAVK,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,SAAS,SAASC,OAAO,QAASC,OAAO,oBACjDJ,EAAMK,WCmBJC,E,kDArBZ,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IAEDO,MAAM,CACPC,UAAS,GAJI,E,8DAQAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIvB,OAAGG,KAAKJ,MAAMC,SACH,yDAGJG,KAAKX,MAAMK,a,GAlBEQ,aCoDbC,E,kDA7Cb,aAAe,IAAD,8BACZ,gBAgBFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,QAC1CC,QAAQC,IAAI,EAAKd,MAAMU,cAhBvB,EAAKV,MAAQ,CACXhB,OAAQ,GACR0B,YAAa,IALH,E,gEASO,IAAD,OAClBK,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKd,SAAS,CAAErB,OAAQmC,S,+BAQpB,IAAD,EACyBf,KAAKJ,MAA7BhB,EADD,EACCA,OAAQ0B,EADT,EACSA,YAEVU,EAAiBpC,EAAOqC,QAAO,SAACC,GACpC,OAAOA,EAAMC,KAAKC,cAAcC,SAASf,EAAYc,kBAGvD,OAAQxC,EAAO0C,OAGb,yBAAKtC,UAAU,MACb,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWD,aAAciB,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUxB,OAAQoC,OAPtB,2C,GA9BYO,IAAMrB,WCIJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACLW,QAAQX,MAAMA,EAAM0C,a","file":"static/js/main.68e8d5a1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) => {\r\n    if(true){\r\n        throw new Error(\"some thing went wrong\") \r\n    }\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card key={i} id={robots[i].id} email={robots[i].email} name={robots[i].name} />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react'\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div>\r\n            <div className='pa2'>\r\n               <input \r\n               className=\"pa3 ba b--green bg-lightest-blue\" \r\n               type='search'\r\n               placeholder='search robots'\r\n               onChange={searchChange}\r\n               />\r\n             \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow:'scroll',height:'600px' ,border:'5px solid black'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll\r\n","import React, { Component } from 'react'\r\n\r\n class errorBoundry extends Component {\r\n   constructor(props){\r\n    super(props)\r\n\r\n    this.state={\r\n        hasError:false\r\n    }\r\n   }\r\n\r\n   componentDidCatch(error,info){\r\n       this.setState({hasError:true})\r\n   }\r\n    \r\n    render() {\r\n        if(this.state.hasError){\r\n            return <h1>Oooops . that is not good</h1>\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default errorBoundry\r\n","import React from \"react\";\nimport \"./App.css\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\n\nimport ErrorBoundry  from '../components/errorBoundry'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      robots: [],\n      searchfield: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => {\n        this.setState({ robots: users });\n      });\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n    console.log(this.state.searchfield);\n  };\n  render() {\n    const { robots, searchfield } = this.state;\n\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n\n    return !robots.length ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\"> RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange}></SearchBox>\n        <Scroll>\n          <ErrorBoundry>\n          <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n          \n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}